//Auto-generated from object code sources. This loads the user's program into memory
UnitPre:  Mem[0x0000]=0x4900, Mem[0x0002]=0x0400, Mem[0x0004]=0x4869, Mem[0x0006]=0x0000, 
//Auto-generated from Pep9 spec. This initializes registers properly
UnitPre: SP=0xFB8F

//* This file contains a complete implementation of the microcode needed to execute
//* the Pep/9 instruction set. In order to test a working program,
//* Clone this file,

//*****************
//
// Instruction Specifier & Operand Specifier Fetch
//
//*****************

//First, decide if the program counter is even, and pick the appropriate fetch logic
1. start: if ISPCE uvnc_even else uvnc_odd

//*
//* Even Instruction Specifier fetch w/ prefetch
//*
2. uvnc_even: A=6, B=7, MARMux=1; MARCk
// Initiate fetch, PC <- PC plus 1.
3. MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
4. MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
5. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// IR <- MDREven, T1 <- MDROdd, PrefetchValid <- true.
6. EOMux=0, AMux=0, ALU=0, CMux=1, C=8; LoadCk
7. EOMux=1, AMux=0, ALU=0, CMux=1, C=11, PVALID=1; LoadCk, PValidck; goto end_is_fetch


//*
//* Odd Instruction Specifier fetch
//*
//Determine if prefetch in T1 is valid.
8. uvnc_odd: if ISPREFETCHVALID unvc_odd_v else unvc_odd_i

//Path taken when prefetch is valid. IR <- T1
9. unvc_odd_v: A=11, AMux=1, ALU=0, CMux=1, C=8; LoadCk
// PC <- PC plus 1.
10. A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
11. A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk; goto end_is_fetch

//Path taken when prefetch is not valid. IR <- Mem[PC]<8..15>
// Initiate fetch, PC <- PC + 1.
12. unvc_odd_i: A=6, B=7, MARMux=1; MARCk
13. MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
14. MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
15. MemRead, MDROMux=0; MDROCk
//T1 <- MDROdd.
16. EOMux=1, AMux=0, ALU=0, CMux=1, C=8; LoadCk; goto end_is_fetch


//Instruction is fetched. Either prepare to execute unary instruction,
// or fetch operand specifier for non-unary instructions
17. end_is_fetch: if ISUNARY unary_dispatch else os_fetch
18. unary_dispatch: A=5; ISD //Start the unary execution path via the instruction specifier decoder.
//"A=5" is placeholder so that the assembler compiles this statement, since branches are currently not allowed
//on a line by themselves


//*
//* Operand Specifier Fetch
//*

//Branch if PC is even or odd
19. os_fetch: if ISPCE os_even else os_odd

//PC is even, so there is no prefetch to use. Go to Mem[PC]
20. os_even: A=6, B=7, MARMux=1; MARCk
// Initiate fetch, PC <- PC plus 2.
21. MemRead, A=7, B=24, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
22. MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
23. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// OS <- MDREven & MDROdd
24. EOMux=0, AMux=0, ALU=0, CMux=1, C=9; LoadCk
25. EOMux=1, AMux=0, ALU=0, CMux=1, C=10; LoadCk; AMD

// PC <- PC plus 2.
26. os_odd: A=7, B=24, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
27. A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
//Initiate fetch from Mem[PC].
28. A=6, B=7, MARMux=1; MARCk
//OS<hi> <- T1.
29. MemRead, A=11, AMux=1, ALU=0, CMux=1, C=9; LoadCk
30. MemRead
31. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// OS<lo> <- MDREven, T1 <- MDROdd, PrefetchValid <- true.
32. EOMux=0, AMux=0, ALU=0, CMux=1, C=10; LoadCk
33. EOMux=1, AMux=0, ALU=0, CMux=1, C=11, pvalid=1; PValidCk, LoadCk; AMD


//*****************
//
// Operand Specifier Decoder
//
//*****************
//Each addressing mode is responsible for the following:
//1. T6 <- Value of Operand Specifier after using the correct loads based on the addressing mode of the instruction
//2. T5 <- Address of the first byte of the location where the value in T6 came from. Immediate addressing does not need to do this.
//3. Using the ISD branch function to continue microprogram execution.

//Here is an example. Consider the instruction "LDWA 6,d" and suppose Mem[0x0006] = 0xCAFE.
//At the end of the "dAddr" unit, T6 <- 0xCAFE & T5 <- 0x0006.

//Another example. Consider the instruction LDWA 7,n and suppose:
//Mem[0x0007]=0xFE, Mem[0x0008]=0x01, Mem[0xFE01]=0xBE,Mem[0xFE02]=EF.
//At the of the "nAddr" unit, T6 <- 0xBEEF & T5 <- 0xFE01.

//Immediate Addressing. T6 <- OperSpec. T5 is ignored
34. iAddr: A=9, AMux=1, ALU=0, CMux=1, C=20; LoadCk
35. A=10, AMux=1, ALU=0, CMux=1, C=21; LoadCk; ISD


//*
//* Direct Addressing Mode & Derivatives (D & S, X, SX)
//*


//Direct Addressing Mode. T6 <- Mem[OperSpec], T5 <- OperSpec
36. dAddr:a=10, amux=1, alu=0, cmux=1, c=19; loadck
37. a=9, amux=1, alu=0, cmux=1, c=18; loadck
//MAR <- OperSpec, initiate fetch
38. A=9, B=10, MARMux=1; MARCk
//If OprSpec<lo> is odd,
39. MemRead, A=10, AMux=1, ALU=13; SCk; if BRS d_odd else d_even

40. d_odd: MemRead, A=10, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
41. MemRead, A=9, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared

//Shared between all "direct derivative" addressing modes.
//Assumes T4 is address of next byte to fetch, and MDRO contrinas T6<hi>
42. d_odd_shared: A=16, B=17, MARMux=1; MARCk
//T6<hi> <- MDRO
43. MemRead, EOMux=1, AMux=0, ALU=0, CMux=1, C=20; LoadCk
44. MemRead
45. MemRead, MDREMux=0; MDRECk
//T6<lo> <- MDRE
46. EOMux=0, AMux=0, ALU=0, CMux=1, C=21; LoadCk; ISD

//Shared between all "direct derivative" addressing modes. Loads an entire aligned word from mem into T6
47. d_even: MemRead
48. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//T6 <- MDRE & MDRO
49. EOMux=0, AMux=0, ALU=0, CMux=1, C=20; LoadCk
50. EOMux=1, AMux=0, ALU=0, CMux=1, C=21; LoadCk; ISD



//Stack Relative Addressing Mode. T6 <- Mem[OperSpec plus SP], T5 <- OperSpec plus SP.
51. sAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
52. A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared



//indexed Addressing Mode. T6 <- Mem[OperSpec plus X], T5 <- OperSpec plus X.
53. xAddr: A=10, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
54. A=9, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared



//Stack Indexed Addressing Mode. T6 <- Mem[OperSpec plus SP plus X], T5 <- OperSpec plus SP plus X.
55. sxAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
56. A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk
57. A=19, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
58. A=18, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk

//S, X, SX addressing modes all behave like D once the addition is performed.
//Determine if the memory address being fetched is even. If so goto d_even.
59. sx_shared: A=18, B=19, MARMux=1; MARCk
60. MemRead, A=19, AMux=1, ALU=13; SCk; if BRS sx_odd else d_even
//Else T4 <- T5 plus 1, MDRO <- Mem[T5]<lo> , goto d_odd_shared
61. sx_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
62. MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared


//*
//* Indirect Addressing Mode & Derivatives (N & SF)
//*

//Indirect Addressing Mode. T6 <- Mem[Mem[OperSpec]], T5 <- Mem[OperSpec].
//Initiate fetch Mem[OperSpec], branch if OperSpec is odd or even
63. nAddr: A=9, B=10, MARMux=1; MARCk
64. MemRead, A=10, AMux=1, ALU=13; SCk; if BRS n1_odd else n1_even

//Even path for first memread
65. n1_even: MemRead
66. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//Determine if Mem[OperSpec] is even or odd
67. MARMux=0, EOMux=1, AMux=0, ALU=13; SCk, MARCk
//T5 <- Mem[OperSpec]
68. eomux=0, amux=0, alu=0,cmux=1,c=18; loadck
69. eomux=1, amux=0, alu=0,cmux=1,c=19; loadck
70. MemRead; if BRS n2_odd else d_even

//Odd path for first memread
//Fetch Mem[OperSpec], T4 <- OperSpec plus 1,
71. n1_odd: MemRead, A=10, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
72. MemRead, A=9, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk
//Fetch Mem[T4]
73. n1_odd_shared: A=16, B=17, MARMux=1; MARCk
//T5<hi> <- MDRO
74. MemRead, EOMux=1, AMux=0, ALU=0, CMux=1, C=18; LoadCk
75. MemRead
76. MemRead, MDREMux=0; MDRECk
//T5<lo> <- MDRE
77. EOMux=0, AMux=0, ALU=0, CMux=1, C=19; LoadCk
78. A=18, B=19, MARMux=1; MARCk
//If T5<lo> is even, remaining fetch is identical to d_even.
79. MemRead, A=19, AMux=1, ALU=13; SCk; if BRS n2_odd else d_even

//Otherwise T4 <- T5 plus 1; goto d_odd_shared
80. n2_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
81. MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared


//Stack Deferred Addressing Mode. T6 <- Mem[Mem[OperSpec plus SP]], T5 <- Mem[OperSpec plus SP].
//T4 <- OperSpec plus SP
82. sfAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
83. A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
//Fetch Mem[T4]
84. A=16, B=17, MARMux=1; MARCk
//If T4<lo> is even, remaining fetch is identical to n1_even.
85. MemRead, A=17, AMux=1, ALU=13; SCk; if BRS sf_odd else n1_even
//Otherwise MDRO <- Mem[T4]<lo>; T4 <- T4 plus 1; goto n1_odd_shared
86. sf_odd: MemRead, A=17, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
87. MemRead, A=16, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto n1_odd_shared


//*
//* Stack Deferred Indexed T6 <- Mem[Mem[OperSpec plus SP] plus X], T5 <- Mem[OperSpec plus SP] plus X.
//*
//Unfortunately, this code shares little with other addressing modes due to the multiple additions


//T4 <- OperSpec plus SP
88. sfxAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
89. A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
//Fetch Mem[T4]
90. A=16, B=17, MARMux=1; MARCk
//Branch if T4<lo> is odd
91. MemRead, A=17, AMux=1, ALU=13; SCk; if BRS sfx1_odd else sfx1_even

//Even path for first memread
92. sfx1_even: MemRead
93. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//T5 <- MDRE plus X<hi> plus cin & MDRO plus X<lo>
94. B=3, EOMux=1, AMux=0, ALU=1, CMux=1, C=19; SCk, LoadCk
95. B=2, EOMux=0, AMux=0, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sfx1_shared

//Odd path for first memread
//T4 <- T4 plus 1
96. sfx1_odd: MemRead, A=17, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
97. MemRead, A=16, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk
//Fetch Mem[T4]
98. A=16, B=17, MARMux=1; MARCk
99. MemRead
100. MemRead
101. MemRead, MDREMux=0; MDRECk
//T5 <- MDRO plus X<hi> plus cin & MDRE plus X<lo>
102. B=3, EOMux=0, AMux=0, ALU=1, CMux=1, C=19; SCk, LoadCk
103. B=2, EOMux=1, AMux=0, CSMux=1, ALU=2, CMux=1, C=18; LoadCk

//Prepare for second memread
104. sfx1_shared: A=18, B=19, MARMux=1; MARCk
//If T4<lo> is even, remaining fetch is identical to d_even.
105. MemRead, A=19, AMux=1, ALU=13; SCk; if BRS sfx2_odd else d_even

//Otherwise T4 <- T4 plus 1; goto d_odd_shared
106. sfx2_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
107. MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared

//*****************
//
// Instruction implementation
//
//*****************


//*
//* Unclassified Unary Instructions
//*

//Stop Execution
108. stop: stop

// A <- SP
109. movspa: A=5, AMux=1, ALU=0, CMux=1, C=1; LoadCk
110. A=1, AMux=1, ALU=0, CMux=1, C=0; LoadCk; goto start

// A<8-11> <- 0, A<12-15> <- NZVC
111. movflga:CMux=0, C=1; LoadCk; goto start

// NZVC <- A<12-15>
112. movaflg: A=1, AMux=1, ALU=15, AndZ=0; NCk, ZCk, VCk, CCk; goto start

//Unary no operation
113. nop0: A=5; goto start


//*
//* Unary Logical Instructions
//*


//A <- ~A; N <- A<0, Z <- A=0
114. nota: A=1, AMux=1, ALU=10, AndZ=0, CMux=1, C=1; ZCk, LoadCk
115. A=0, AMux=1, ALU=10, AndZ=1, CMux=1, C=0; NCk, ZCk, LoadCk; goto start

//X <- ~X; N <- X<0, Z <- X=0
116. notx: A=3, AMux=1, ALU=10, AndZ=0, CMux=1, C=3; ZCk, LoadCk
117. A=2, AMux=1, ALU=10, AndZ=1, CMux=1, C=2; NCk, ZCk, LoadCk; goto start

//A <- -A; N <- A<0, Z <- A=0, V <- {Overflow}
118. nega: A=1, B=23, AMux=1, ALU=3, AndZ=0, CMux=1, C=1; ZCk, SCk, LoadCk
119. A=0, B=22, AMux=1, CSMux=1, ALU=4, AndZ=0, CMux=1, C=0; NCk, ZCk, VCk, LoadCk; goto start

//X <- -X; N <- X<0, Z <- X=0, V <- {Overflow}
120. negx: A=3, B=23, AMux=1, ALU=3, AndZ=0, CMux=1, C=3; ZCk, SCk, LoadCk
121. A=2, B=22, AMux=1, CSMux=1, ALU=4, AndZ=0, CMux=1, C=2; NCk, ZCk, VCk, LoadCk; goto start

//*
//* Unary Shift & Rotate Instructions
//*


//C <- A<0>, A<0..14> <- A<1..15>, A<15> <- 0; N <- A<0, Z <- A=0, V <- {Overflow}
122. asla: A=1, AMux=1, ALU=11, AndZ=0, CMux=1, C=1; ZCk, SCk, LoadCk
123. A=0, AMux=1, CSMux=1, ALU=12, AndZ=1, CMux=1, C=0; NCk, ZCk, VCk, CCk, LoadCk; goto start

//C <- X<0>, X<0..14> <- X<1..15>, X<15> <- 0; N <- X<0, Z <- X=0, V <- {Overflow}
124. aslx: A=3, AMux=1, ALU=11, AndZ=0, CMux=1, C=3; ZCk, SCk, LoadCk
125. A=2, AMux=1, CSMux=1, ALU=12, AndZ=1, CMux=1, C=2; NCk, ZCk, VCk, CCk, LoadCk; goto start

//C <- A<15>, A<1..15> <- A<0..14>; N <- A<0, Z <- A=0
126. asra: A=0, AMux=1, ALU=13, AndZ=0, CMux=1, C=0; NCk, ZCk, SCk, LoadCk
127. A=1, AMux=1, CSMux=1, ALU=14, AndZ=1, CMux=1, C=1; ZCk, CCk, LoadCk; goto start

//C <- X<15>, X<1..15> <- X<0..14>; N <- X<0, Z <- X=0
128. asrx: A=2, AMux=1, ALU=13, AndZ=0, CMux=1, C=2; NCk, ZCk, SCk, LoadCk
129. A=3, AMux=1, CSMux=1, ALU=14, AndZ=1, CMux=1, C=3; ZCk, CCk, LoadCk; goto start

//C <- A<0>, A<0..14> <- A<1..15>, A<15> <- C
130. rola: A=1, AMux=1, CSMux=0, ALU=12, CMux=1, C=1; SCk, LoadCk
131. A=0, AMux=1, CSMux=1, ALU=12, CMux=1, C=0; CCk, LoadCk; goto start

//C <- X<0>, X<0..14> <- X<1..15>, X<15> <- C
132. rolx: A=3, AMux=1, CSMux=0, ALU=12, CMux=1, C=3; SCk, LoadCk
133. A=2, AMux=1, CSMux=1, ALU=12, CMux=1, C=2; CCk, LoadCk; goto start

//C <- A<15>, A<1..15> <- A<0..14>, A<0> <- C
134. rora: A=0, AMux=1, CSMux=0, ALU=14, CMux=1, C=0; SCk, LoadCk
135. A=1, AMux=1, CSMux=1, ALU=14, CMux=1, C=1; CCk, LoadCk; goto start

//C <- X<15>, X<1..15> <- X<0..14>, X<0> <- C
136. rorx: A=2, AMux=1, CSMux=0, ALU=14, CMux=1, C=2; SCk, LoadCk
137. A=3, AMux=1, CSMux=1, ALU=14, CMux=1, C=3; CCk, LoadCk; goto start

//*
//* Non-Unary Branch Instructions
//*

//PC <- T6
138. br: A=21, AMux=1, ALU=0, CMux=1, C=7; LoadCk
139. A=20, AMux=1, ALU=0, CMux=1, C=6, PValid=0;PValidCk, LoadCk; goto start

140. brle: if BRLE br else start //N=1+Z=1 => (PC <- T6)
141. brlt: if BRLT br else start //N=1 => (PC <- T6)
142. breq: if BREQ br else start //N=1 => (PC <- T6)
143. brne: if BRNE br else start //N=0 => (PC <- T6)
144. brge: if BRGE br else start //N=0+Z=1 => (PC <- T6)
145. brgt: if BRGT br else start //N=0 => (PC <- T6)
146. brv: if BRV br else start //V=1 => (PC <- T6)
147. brc: if BRC br else start //C=1 => (PC <- T6)


//*
//* Non-Unary Arithetic Instruction
//*


//SP <- SP plus T6
148. addsp: A=5, B=21, AMux=1, ALU=1, AndZ=0, CMux=1, C=5; ZCk, SCk, LoadCk
149. A=4, B=20, AMux=1, CSMux=1, ALU=2, AndZ=1, CMux=1, C=4; NCk, ZCk, VCk, CCk, LoadCk; goto start

//SP <- SP minus T6
150. subsp: A=5, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=5; ZCk, SCk, LoadCk
151. A=4, B=20, AMux=1, CSMux=1, ALU=4, AndZ=1, CMux=1, C=4; NCk, ZCk, VCk, CCk, LoadCk; goto start


// A <- A plus T6; N <- A<0, Z <- A=0, V <- {Overflow}, C <- {Carry}
152. adda: A=1, B=21, AMux=1, ALU=1, AndZ=0, CMux=1, C=1; ZCk, SCk, LoadCk
153. A=0, B=20, AMux=1, CSMux=1, ALU=2, AndZ=1, CMux=1, C=0; NCk, ZCk, VCk, CCk, LoadCk; goto start

// X <- X plus T6; N <- A<0, Z <- A=0, V <- {Overflow}, C <- {Carry}
154. addx: A=3, B=21, AMux=1, ALU=1, AndZ=0, CMux=1, C=3; ZCk, SCk, LoadCk
155. A=2, B=20, AMux=1, CSMux=1, ALU=2, AndZ=1, CMux=1, C=2; NCk, ZCk, VCk, CCk, LoadCk; goto start

// A <- A minus T6; N <- A<0, Z <- A=0, V <- {Overflow}, C <- {Carry}
156. suba: A=1, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=1; ZCk, SCk, LoadCk
157. A=0, B=20, AMux=1, CSMux=1, ALU=4, AndZ=1, CMux=1, C=0; NCk, ZCk, VCk, CCk, LoadCk; goto start

// X <- X minus T6; N <- A<0, Z <- A=0, V <- {Overflow}, C <- {Carry}
158. subx: A=3, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=3; ZCk, SCk, LoadCk
159. A=2, B=20, AMux=1, CSMux=1, ALU=4, AndZ=1, CMux=1, C=2; NCk, ZCk, VCk, CCk, LoadCk; goto start

//*
//* Non-Unary Logical Instructions
//*

//A <- A*T6; N <- A<0, Z <- A=0
160. anda: A=1, B=21, AMux=1, ALU=5, AndZ=0, CMux=1, C=1; ZCk, LoadCk
161. A=0, B=20, AMux=1, ALU=5, AndZ=1, CMux=1, C=0; NCk, ZCk, LoadCk; goto start

//X <- X*T6; X <- A<0, Z <- X=0
162. andx: A=3, B=21, AMux=1, ALU=5, AndZ=0, CMux=1, C=3; ZCk, LoadCk
163. A=2, B=20, AMux=1, ALU=5, AndZ=1, CMux=1, C=2; NCk, ZCk, LoadCk; goto start

//A <- A+T6; N <- A<0, Z <- A=0
164. ora: A=1, B=21, AMux=1, ALU=7, AndZ=0, CMux=1, C=1; ZCk, LoadCk
165. A=0, B=20, AMux=1, ALU=7, AndZ=1, CMux=1, C=0; NCk, ZCk, LoadCk; goto start

//A <- A+T6; N <- X<0, Z <- X=0
166. orx: A=3, B=21, AMux=1, ALU=7, AndZ=0, CMux=1, C=3; ZCk, LoadCk
167. A=2, B=20, AMux=1, ALU=7, AndZ=1, CMux=1, C=2; NCk, ZCk, LoadCk; goto start

//*
//* Non-Unary Comparison Instructions
//*
168. cpwa: A=1, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=15; ZCk, SCk, LoadCk
169. A=0, B=20, AMux=1, CSMux=1, ALU=4, AndZ=1, CMux=1, C=14; NCk, ZCk, VCk, CCk, LoadCk; goto start

170. cpwx: A=3, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=15; ZCk, SCk, LoadCk
171. A=2, B=20, AMux=1, CSMux=1, ALU=4, AndZ=1, CMux=1, C=14; NCk, ZCk, VCk, CCk, LoadCk; goto start

172. cpba: A=1, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=15; NCk, ZCk, VCk, CCk, LoadCk; goto start
173. cpbx: A=3, B=21, AMux=1, ALU=3, AndZ=0, CMux=1, C=15; NCk, ZCk, VCk, CCk, LoadCk; goto start

//*
//* Load Instructions
//*
//Load byte instructions have to decide which of the two bytes to use
//If immediate, use leftmost byte.
//Otherwise, if T5 is even, use right, else use left.
//Store the AAA field in t4
174. ldba: a=27,b=23, c=17, amux=1, alu=3, cmux=1; loadck
175. a=8,b=17,AMux=1, alu=5, cmux=1,c=17; loadck
176. a=17,b=31,amux=1,alu=1;sck;  if BRS ldba_eo else ldba_oi
177. ldba_eo: a=19,amux=1,alu=13; sck ;if BRS ldba_oi else ldba_e 
178. ldba_oi:a=21, AMux=1, ALU=0, AndZ=0, CMux=1, C=1; NCk, ZCk, LoadCk; goto start
179. ldba_e:A=20, AMux=1, ALU=0, AndZ=0, CMux=1, C=1; NCk, ZCk, LoadCk; goto start

180. ldbx: a=27,b=23, c=17, amux=1, alu=3, cmux=1; loadck
181. a=8,b=17,AMux=1, alu=5, cmux=1,c=17; loadck
182. a=17,b=31,amux=1,alu=1;sck; if BRS ldbx_eo else ldbx_oi
183. ldbx_eo: a=19,amux=1,alu=13; sck; if BRS ldbx_oi else ldbx_e
184. ldbx_oi:a=21, AMux=1, ALU=0, AndZ=0, CMux=1, C=3; NCk, ZCk, LoadCk; goto start
185. ldbx_e:A=20, AMux=1, ALU=0, AndZ=0, CMux=1, C=3; NCk, ZCk, LoadCk; goto start

186. ldwa: A=21, AMux=1, ALU=0, AndZ=0, CMux=1, C=1; ZCk, LoadCk
187. A=20, AMux=1, ALU=0, AndZ=1, CMux=1, C=0; NCk, ZCk, LoadCk; goto start

188. ldwx: A=21, AMux=1, ALU=0, AndZ=0, CMux=1, C=3; ZCk, LoadCk
189. A=20, AMux=1, ALU=0, AndZ=1, CMux=1, C=2; NCk, ZCk, LoadCk; goto start

//*
//* Store Instructions
//*
//Store Byte Accumulate
190. stba: A=18, B=19, MARMux=1; MARCk
191. MemRead, A=19,AMUX=1, ALU=13; SCk; if BRS stba_o else stba_e
192. stba_o: MemRead, A=1, AMux=1, ALU=0, CMux=1, MDROMux=1; MDROCk; goto stbr_o
193. stba_e: MemRead, A=1, AMux=1, ALU=0, CMux=1, MDREMux=1; MDRECk; goto stbr_e


194. sbtx: A=18, B=19, MARMux=1; MARCk
195. MemRead, A=21,AMUX=1, ALU=13; SCk; if BRS stbx_o else stbx_e
196. stbx_o: MemRead, A=3, AMux=1, ALU=0, CMux=1, MDROMux=1; MDROCk; goto stbr_o
197. stbx_e: MemRead, A=3, AMux=1, ALU=0, CMux=1, MDREMux=1; MDRECk; goto stbr_e

//Shared store byte ode
198. stbr_o: MemRead, MDREMux=0; MDRECk; goto mwrte
199. stbr_e: MemRead, MDROMux=0; MDROCk
200. mwrte: MemWrite
201. MemWrite
202. mwrte3: MemWrite; goto start


//Store word instructions
//First thing, determine if taking even or odd path
203. stwa: a=18, b=19, MARMUX=1; marck
204. a=19,amux=1, alu=13; sck; if brs stwa_o else stwa_e

205. stwa_o: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
206. MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
207. MemRead, A=0, AMux=1, ALU=0, CMux=1, MDREMux=0, MDROMux=1; MDRECk, MDROCk
208. MemWrite, A=1, amux=1, ALU=0, CMux=1, C=15; LoadCk; goto stwr_o

209. stwa_e: MemWrite, A=1, AMux=1, ALU=0, CMux=1, MDROMux=1; MDROCk
210. MemWrite, A=0, AMux=1, ALU=0, CMux=1, MDREMux=1; MDRECk; goto mwrte3


211. stwx: a=18, b=19, MARMUX=1; marck
212. a=19,amux=1, alu=13; sck; if brs stwx_o else stwx_e

213. stwx_o: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
214. MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
215. MemRead, A=2, AMux=1, ALU=0, CMux=1, MDREMux=0, MDROMux=1; MDRECk, MDROCk
216. MemWrite, A=3,amux=1, ALU=0, CMux=1, C=15; LoadCk; goto stwr_o

217. stwx_e: MemWrite, A=3, AMux=1, ALU=0, CMux=1, MDROMux=1; MDROCk
218. MemWrite, A=2, AMux=1, ALU=0, CMux=1, MDREMux=1; MDRECk; goto mwrte3

219. stwr_o: MemWrite
220. MemWrite
221. A=16, B=17, MARMux=1; MARCk
222. MemRead, A=15, AMux=1, ALU=0, CMux=1, MDREMux=1; MDRECk
223. MemRead
224. MemRead, MDROMux=0; MDROCk; goto mwrte


//*
//* Call & Return functions
//*
//First determine if SP is even
//If even, then take the aligned path
//Otherwise, take the unaligned path
225. call:A=5, AMux=1, ALU=13; SCk; if BRS call_o else call_e
//Decr SP by 2
226. call_e:a=5,b=24, c=5, AMUX=1, ALu=3, CMUX=1; loadCK, SCK
227. a=4,b=22, c=4, AMUX=1, ALu=4, CSMUX=1, CMUX=1; loadCK
228. A=4, B=5, MARMux=1, PValid=0; PValidCk, MARCk
229. MemWrite, A=7, AMux=1, ALU=0, CMUX=1, MDROMux=1; MDROCk
230. MemWrite, A=6, AMux=1, ALU=0,CMUX=1, MDREMux=1; MDRECk
231. MemWrite, A=21, AMux=1, ALU=0, CMux=1, C=7; LoadCk
232. A=20, AMux=1, ALU=0, CMux=1, C=6; LoadCk; goto start

233. call_o: A=4, B=5, MARMux=1, PValid=0; PValidCk, MARCk
//Decr SP by 2
234. memread, a=5, b=24, c=5, AMUX=1, ALU=3, CMUX=1; loadck, sck
235. memread, a=4, b=22, c=4, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck
236. memread, a=7, amux=1,alu=0,CMUX=1,MDREMux=1, MDROMUX=0; mdrock, mdreck
//Assign PC<hi> to T4<hi>, so that PC can be overriden earlier in the microcode
237. memwrite, a=6, amux=1, alu=0, cmux=1, c=16; loadck
238. memwrite, a=21, amux=1, alu=0, cmux=1, C=7; loadck
239. memwrite, a=20, amux=1, alu=0, cmux=1, c=6; loadck
240. A=4, B=5, MARMux=1, PValid=0; PValidCk, MARCk
241. memread
242. memread
243. memread, a=16, amux=1, alu=0, CMUX=1, MDREMUX=0,mdromux=1; mdreck, mdrock ;goto mwrte


//This one is really really bad if unaligned
244. ret: A=4, B=5, MARMux=1, Pvalid=0;PvalidCk, MARCk
245. A=5, AMux=1, ALU=13; SCk; if BRS ret_o else ret_e
246. ret_o: memread, A=5, B=24, AMux=1, ALU=1, CMux=1, C=5; SCk, LoadCk
247. memread, A=4, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=4; loadck
248. memread, MDROMux=0; MDROCK
249. A=4, B=5, MARMux=1; marck
250. memread
251. memread
252. memread, EOMUX=1, AMUX=0, ALU=0, CMUX=1, C=6, MDReMUX=0; MDReCK, loadck
253. EOMUX=0, AMUX=0, ALU=0, CMUX=1, C=7; loadck;  goto start
254. ret_e: MemRead, A=5, B=24, AMux=1, ALU=1, CMux=1, C=5; SCk, LoadCk
255. MemRead, A=4, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=4; SCk
256. MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
257. EOMux=0, AMux=0, ALU=0, CMux=1, C=6; LoadCk
258. EOMux=1, AMux=0, ALU=0, CMux=1, C=7; LoadCk; goto start
//TODO
259. rettr: stop //Don't bother with traps for now


//trap instructions
260. nop1: A=5; goto trap
261. nop: A=5; goto trap
262. deci: A=5; goto trap
263. deco: A=5; goto trap
264. hexo: A=5; goto trap
265. stro: A=5
//T4 <- Mem[0xFFF6]. Registers T1, T4, T5, T6 are in use.
266. trap: a=31, b=29, MARMux=1, PValid=0; marck, PValidCK
267. memread
268. memread
269. memread, MDREMUX=0, MDROMUX=0; MDRECK, MDROCK
270. EOMux=0, AMux=0, ALU=0, CMux=1, C=16; LoadCk
271. EOMux=1, AMux=0, ALU=0, CMux=1, C=17; LoadCk
//Mem[T - 1] <- IR<0..7?
//Preserve T, Store T-1
272. a=16, b=17, MARMux=1; marck
//T4 <- (T - 3)
273. memread, a=17, b=25, c=17, AMUX=1, alu=3, CMUX=1; Loadck, SCK
274. memread, a=16, b=22, c=16, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck
275. memread, A=8,AMUX=1, ALU=0, CMux=1, MDROMUX=0, MDREMUX=1; MDROCK, MDRECK
//T3 <- (T-5)
276. memwrite, a=17, b=24, c=15, AMUX=1, alu=3, CMUX=1; Loadck, SCK
277. memwrite, a=16, b=22, c=14, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck
278. memwrite

//Store T-2, Store T-3
279. a=16, b=17, MARMux=1; marck
280. memwrite, a=5, amux=1, alu=0, cmux=1, MDROMUX=1; MDROCK
281. memwrite, a=4, amux=1, alu=0, cmux=1, MDREMUX=1; MDRECK
//Calculate lo order of T-7
282. memwrite, a=15, b=24, c=17, AMUX=1, alu=3, CMUX=1; Loadck, SCK

//Store T-4, Store T-5
283. a=14, b=15, MARMux=1; marck
284. memwrite, a=7, amux=1, alu=0, cmux=1, MDROMUX=1; MDROCK
285. memwrite, a=6, amux=1, alu=0, cmux=1, MDREMUX=1; MDRECK
//Calculate hi order of t-7
286. memwrite, a=14, b=22, c=16, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck


//Store T-6, Store T-7
287. a=16, b=17, MARMux=1; marck
288. memwrite, a=3, amux=1, alu=0, cmux=1, MDROMUX=1; MDROCK
289. memwrite, a=2, amux=1, alu=0, cmux=1, MDREMUX=1; MDRECK
//Calculate lo orde of T-9
290. memwrite, a=17, b=24, c=17, AMUX=1, alu=3, CMUX=1; Loadck, SCK


//Store T-8, Store T-9
//Calculate hi order of T-9
291. a=16, b=22, c=16, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck
292. a=16, b=17, MARMux=1; marck
293. memwrite, a=1, amux=1, alu=0, cmux=1, MDROMUX=1; MDROCK
294. memwrite, a=0, amux=1, alu=0, cmux=1, MDREMUX=1; MDRECK
//Calculate lo order of T-10 in sp
295. memwrite, a=17, b=23, c=5, AMUX=1, alu=3, CMUX=1; Loadck, SCK


//Store T-10, Preserve T-11
//Calculate high order of t-10
296. a=16, b=22, c=4, AMUX=1, ALU=4, CSMUX=1, CMUX=1; loadck
297. a=4, b=5, MARMux=1; marck
298. memwrite, cmux=0, MDREMux=1; MDRECK
299. memwrite
300. memwrite

//Load to PC
301. a=31, b=30, MARMux=1; marck
302. memread
303. memread
304. memread, MDREMUX=0, MDROMUX=0; mdrock, mdreck
305. EOMux=0, AMux=0, alu=0, cmux=1, c=6; loadck
306. EOMux=1, AMux=0, alu=0, cmux=1, c=7; loadck; goto start

