UnitPre: IR=0x000000, PC=0x01FF, T1=0x12, S=0
UnitPre: Mem[0x0200]=0xAABB, Mem[0x0202]=0xCCDD,Mem[0x0204]=0xEEFF

//*****************
//
// Instruction Specifier & Operand Specifier Fetch
//
//*****************

//First, decide if the program counter is even, and pick the appropriate fetch logic
start: if ISPCE uvnc_even else uvnc_odd

//*
// * Even Instruction Specifier fetch w/ prefetch
//*
uvnc_even: A=6, B=7, MARMux=1; MARCk 
// Initiate fetch, PC <- PC plus 1.
MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// IR <- MDREven, T1 <- MDROdd, PrefetchValid <- true.
EOMux=0, AMux=0, ALU=0, CMux=1, C=8; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=11, PVALID=1; LoadCk, PValidck; goto end_is_fetch


//*
//* Odd Instruction Specifier fetch
 //*
//Determine if prefetch in T1 is valid.
uvnc_odd: if ISPREFETCHVALID unvc_odd_v else unvc_odd_i

//Path taken when prefetch is valid. IR <- T1
unvc_odd_v: A=11, AMux=1, ALU=0, CMux=1, C=8; LoadCk
// PC <- PC plus 1.
A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk; goto end_is_fetch

//Path taken when prefetch is not valid. IR <- Mem[PC]<8..15>
// Initiate fetch, PC <- PC + 1.
unvc_odd_i: A=6, B=7, MARMux=1; MARCk
MemRead, A=7, B=23, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
MemRead, MDROMux=0; MDROCk
//T1 <- MDROdd.
EOMux=1, AMux=0, ALU=0, CMux=1, C=8; LoadCk; goto end_is_fetch


//Instruction is fetched. Either prepare to execute unary instruction,
// or fetch operand specifier for non-unary instructions
end_is_fetch: if ISUNARY unary_dispatch else os_fetch
unary_dispatch: A=5; ISD //Start the unary execution path via the instruction specifier decoder.
//"A=5" is placeholder so that the assembler compiles this statement, since branches are currently not allowed
//on a line by themselves


//*
//* Operand Specifier Fetch
//*
 
//Branch if PC is even or odd
os_fetch: if ISPCE os_even else os_odd

//PC is even, so there is no prefetch to use. Go to Mem[PC]
os_even: A=6, B=7, MARMux=1; MARCk
// Initiate fetch, PC <- PC plus 2.
MemRead, A=7, B=24, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
MemRead, A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// OS <- MDREven & MDROdd
EOMux=0, AMux=0, ALU=0, CMux=1, C=9; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=10; LoadCk; AMD

// PC <- PC plus 2.
os_odd: A=7, B=24, AMux=1, ALU=1, CMux=1, C=7; SCk, LoadCk
A=6, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, C=6; LoadCk
//Initiate fetch from Mem[PC].
A=6, B=7, MARMux=1; MARCk
//OS<hi> <- T1.
MemRead, A=11, AMux=1, ALU=0, CMux=1, C=9; LoadCk
MemRead
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
// OS<lo> <- MDREven, T1 <- MDROdd, PrefetchValid <- true.
EOMux=0, AMux=0, ALU=0, CMux=1, C=10; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=11, pvalid=1; PValidCk, LoadCk; AMD
