UnitPre: IR=0x112233 //alternate between 32 and 33 to work with even / odd fetching
UnitPre: X=0x0004, SP=0x1000
//Direct
UnitPre: Mem[0x2232]=0x5566, Mem[0x2234]=0x7788 //Even should give 5566, odd should give 6677
//indeXed
UnitPre: Mem[0x2236]=0x99AA, Mem[0x2238]=0xBBCC //Even should be 99aa, odd aabb
//Stack-relative
UnitPre: Mem[0x3232]=0xCAFE, Mem[0x3234]=0xEDBE //Even should be cafe, odd feed
//Stack-indeXed
UnitPre: Mem[0x3236]=0xDEAD, Mem[0x3238]=0xDEEF //Even should be dead, odd adde
//iNdirect
UnitPre: Mem[0x5566]=0xBABE //Even should yield babe
UnitPre: Mem[0x6676]=0xDE13, Mem[0x6678]=0x37CA //Odd IR should yield this 1337
//Override earlier mem value to test odd ,even load combination
//unitPre: Mem[0x2234]=0x7888, Mem[0x6678]=0xfade
//Stack-deFfered
UnitPre: Mem[0xCAFE]=0x8086 //Even IR should yield 8086
UnitPre: Mem[0xFEEC]=0x68B3, Mem[0xFEEE]=0x2B92 //Odd IR should yield b32b

//SFX
UnitPre: Mem[0xCB02]=0xFEE1 //Even IR should yield FEE1
UnitPre: Mem[0xFEF0]=0x9635, Mem[0xFEF2]=0x4242 //Odd IR should yield 3542


//#############################################
//Pick which memory addressing mode to use here. Options are:
//iAddr, dAddr, sAddr, xAddr, sxAddr, nAddr, sfAddr, sfxAddr
A=5; goto sfxAddr //A=5 is just there as a placeholder statment, since gotos are not allowed on a line by themselves.
//#############################################

//*****************
//
// Operand Specifier Decoder
//
//*****************
//Each addressing mode is responsible for the following:
//1. T6 <- Value of Operand Specifier after using the correct loads based on the addressing mode of the instruction
//2. T5 <- Address of the first byte of the location where the value in T6 came from. Immediate addressing does not need to do this.
//3. Using the ISD branch function to continue microprogram execution.

//Here is an example. Consider the instruction "LDWA 6,d" and suppose Mem[0x0006] = 0xCAFE.
//At the end of the "dAddr" unit, T6 <- 0xCAFE & T5 <- 0x0006.

//Another example. Consider the instruction LDWA 7,n and suppose:
//Mem[0x0007]=0xFE, Mem[0x0008]=0x01, Mem[0xFE01]=0xBE,Mem[0xFE02]=EF.
//At the of the "nAddr" unit, T6 <- 0xBEEF & T5 <- 0xFE01.

//Immediate Addressing. T6 <- OperSpec. T5 is ignored
iAddr: A=9, AMux=1, ALU=0, CMux=1, C=20; LoadCk
A=10, AMux=1, ALU=0, CMux=1, C=21; LoadCk; ISD


//*
//* Direct Addressing Mode & Derivatives (D & S, X, SX)
//*


//Direct Addressing Mode. T6 <- Mem[OperSpec], T5 <- OperSpec 
dAddr:a=10, amux=1, alu=0, cmux=1, c=19; loadck
a=9, amux=1, alu=0, cmux=1, c=18; loadck
//MAR <- OperSpec, initiate fetch
A=9, B=10, MARMux=1; MARCk
//If OprSpec<lo> is odd,
MemRead, A=10, AMux=1, ALU=13; SCk; if BRS d_odd else d_even

d_odd: MemRead, A=10, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=9, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared

//Shared between all "direct derivative" addressing modes.
//Assumes T4 is address of next byte to fetch, and MDRO contrinas T6<hi>
d_odd_shared: A=16, B=17, MARMux=1; MARCk
//T6<hi> <- MDRO
MemRead, EOMux=1, AMux=0, ALU=0, CMux=1, C=20; LoadCk
MemRead
MemRead, MDREMux=0; MDRECk
//T6<lo> <- MDRE
EOMux=0, AMux=0, ALU=0, CMux=1, C=21; LoadCk; ISD

//Shared between all "direct derivative" addressing modes. Loads an entire aligned word from mem into T6
d_even: MemRead
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//T6 <- MDRE & MDRO
EOMux=0, AMux=0, ALU=0, CMux=1, C=20; LoadCk
EOMux=1, AMux=0, ALU=0, CMux=1, C=21; LoadCk; ISD



//Stack Relative Addressing Mode. T6 <- Mem[OperSpec plus SP], T5 <- OperSpec plus SP. 
sAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared



//indexed Addressing Mode. T6 <- Mem[OperSpec plus X], T5 <- OperSpec plus X. 
xAddr: A=10, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sx_shared



//Stack Indexed Addressing Mode. T6 <- Mem[OperSpec plus SP plus X], T5 <- OperSpec plus SP plus X. 
sxAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk
A=19, B=3, AMux=1, ALU=1, CMux=1, C=19; SCk, LoadCk
A=18, B=2, AMux=1, CSMux=1, ALU=2, CMux=1, C=18; LoadCk

//S, X, SX addressing modes all behave like D once the addition is performed.
//Determine if the memory address being fetched is even. If so goto d_even.
sx_shared: A=18, B=19, MARMux=1; MARCk
MemRead, A=19, AMux=1, ALU=13; SCk; if BRS sx_odd else d_even
//Else T4 <- T5 plus 1, MDRO <- Mem[T5]<lo> , goto d_odd_shared
sx_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared


//*
//* Indirect Addressing Mode & Derivatives (N & SF)
//*

//Indirect Addressing Mode. T6 <- Mem[Mem[OperSpec]], T5 <- Mem[OperSpec]. 
//Initiate fetch Mem[OperSpec], branch if OperSpec is odd or even
nAddr: A=9, B=10, MARMux=1; MARCk
MemRead, A=10, AMux=1, ALU=13; SCk; if BRS n1_odd else n1_even

//Even path for first memread
n1_even: MemRead
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//Determine if Mem[OperSpec] is even or odd
MARMux=0, EOMux=1, AMux=0, ALU=13; SCk, MARCk
//T5 <- Mem[OperSpec]
eomux=0, amux=0, alu=0,cmux=1,c=18; loadck
eomux=1, amux=0, alu=0,cmux=1,c=19; loadck
MemRead; if BRS n2_odd else d_even 

//Odd path for first memread
//Fetch Mem[OperSpec], T4 <- OperSpec plus 1,
n1_odd: MemRead, A=10, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=9, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk
//Fetch Mem[T4]
n1_odd_shared: A=16, B=17, MARMux=1; MARCk
//T5<hi> <- MDRO
MemRead, EOMux=1, AMux=0, ALU=0, CMux=1, C=18; LoadCk
MemRead
MemRead, MDREMux=0; MDRECk
//T5<lo> <- MDRE
EOMux=0, AMux=0, ALU=0, CMux=1, C=19; LoadCk
A=18, B=19, MARMux=1; MARCk
//If T5<lo> is even, remaining fetch is identical to d_even. 
MemRead, A=19, AMux=1, ALU=13; SCk; if BRS n2_odd else d_even

//Otherwise T4 <- T5 plus 1; goto d_odd_shared
n2_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared


//Stack Deferred Addressing Mode. T6 <- Mem[Mem[OperSpec plus SP]], T5 <- Mem[OperSpec plus SP]. 
//T4 <- OperSpec plus SP
sfAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
//Fetch Mem[T4]
A=16, B=17, MARMux=1; MARCk
//If T4<lo> is even, remaining fetch is identical to n1_even.
MemRead, A=17, AMux=1, ALU=13; SCk; if BRS sf_odd else n1_even
//Otherwise MDRO <- Mem[T4]<lo>; T4 <- T4 plus 1; goto n1_odd_shared
sf_odd: MemRead, A=17, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=16, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto n1_odd_shared


//*
//* Stack Deferred Indexed T6 <- Mem[Mem[OperSpec plus SP] plus X], T5 <- Mem[OperSpec plus SP] plus X. 
//*
//Unfortunately, this code shares little with other addressing modes due to the multiple additions


//T4 <- OperSpec plus SP
sfxAddr: A=10, B=5, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
A=9, B=4, AMux=1, CSMux=1, ALU=2, CMux=1, C=16; LoadCk
//Fetch Mem[T4]
A=16, B=17, MARMux=1; MARCk
//Branch if T4<lo> is odd
MemRead, A=17, AMux=1, ALU=13; SCk; if BRS sfx1_odd else sfx1_even

//Even path for first memread
sfx1_even: MemRead
MemRead, MDREMux=0, MDROMux=0; MDRECk, MDROCk
//T5 <- MDRE plus X<hi> plus cin & MDRO plus X<lo>
B=3, EOMux=1, AMux=0, ALU=1, CMux=1, C=19; SCk, LoadCk
B=2, EOMux=0, AMux=0, CSMux=1, ALU=2, CMux=1, C=18; LoadCk; goto sfx1_shared

//Odd path for first memread
//T4 <- T4 plus 1
sfx1_odd: MemRead, A=17, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=16, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk
//Fetch Mem[T4]
A=16, B=17, MARMux=1; MARCk
MemRead
MemRead
MemRead, MDREMux=0; MDRECk
//T5 <- MDRO plus X<hi> plus cin & MDRE plus X<lo>
B=3, EOMux=0, AMux=0, ALU=1, CMux=1, C=19; SCk, LoadCk
B=2, EOMux=1, AMux=0, CSMux=1, ALU=2, CMux=1, C=18; LoadCk

//Prepare for second memread
sfx1_shared: A=18, B=19, MARMux=1; MARCk
//If T4<lo> is even, remaining fetch is identical to d_even.
MemRead, A=19, AMux=1, ALU=13; SCk; if BRS sfx2_odd else d_even

//Otherwise T4 <- T4 plus 1; goto d_odd_shared
sfx2_odd: MemRead, A=19, B=23, AMux=1, ALU=1, CMux=1, C=17; SCk, LoadCk
MemRead, A=18, B=22, AMux=1, CSMux=1, ALU=2, CMux=1, MDROMux=0, C=16; LoadCk, MDROCk; goto d_odd_shared
